# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_mapper')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_mapper')
    _mapper = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_mapper', [dirname(__file__)])
        except ImportError:
            import _mapper
            return _mapper
        try:
            _mod = imp.load_module('_mapper', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _mapper = swig_import_helper()
    del swig_import_helper
else:
    import _mapper
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


OBJ_NONE = _mapper.OBJ_NONE
OBJ_DEVICES = _mapper.OBJ_DEVICES
OBJ_INPUT_SIGNALS = _mapper.OBJ_INPUT_SIGNALS
OBJ_OUTPUT_SIGNALS = _mapper.OBJ_OUTPUT_SIGNALS
OBJ_SIGNALS = _mapper.OBJ_SIGNALS
OBJ_INCOMING_LINKS = _mapper.OBJ_INCOMING_LINKS
OBJ_OUTGOING_LINKS = _mapper.OBJ_OUTGOING_LINKS
OBJ_LINKS = _mapper.OBJ_LINKS
OBJ_INCOMING_MAPS = _mapper.OBJ_INCOMING_MAPS
OBJ_OUTGOING_MAPS = _mapper.OBJ_OUTGOING_MAPS
OBJ_MAPS = _mapper.OBJ_MAPS
OBJ_ALL = _mapper.OBJ_ALL
OP_DOES_NOT_EXIST = _mapper.OP_DOES_NOT_EXIST
OP_EQUAL = _mapper.OP_EQUAL
OP_EXISTS = _mapper.OP_EXISTS
OP_GREATER_THAN = _mapper.OP_GREATER_THAN
OP_GREATER_THAN_OR_EQUAL = _mapper.OP_GREATER_THAN_OR_EQUAL
OP_LESS_THAN = _mapper.OP_LESS_THAN
OP_LESS_THAN_OR_EQUAL = _mapper.OP_LESS_THAN_OR_EQUAL
OP_NOT_EQUAL = _mapper.OP_NOT_EQUAL
BOUND_UNDEFINED = _mapper.BOUND_UNDEFINED
BOUND_NONE = _mapper.BOUND_NONE
BOUND_MUTE = _mapper.BOUND_MUTE
BOUND_CLAMP = _mapper.BOUND_CLAMP
BOUND_FOLD = _mapper.BOUND_FOLD
BOUND_WRAP = _mapper.BOUND_WRAP
MODE_UNDEFINED = _mapper.MODE_UNDEFINED
MODE_RAW = _mapper.MODE_RAW
MODE_LINEAR = _mapper.MODE_LINEAR
MODE_EXPRESSION = _mapper.MODE_EXPRESSION
LOC_UNDEFINED = _mapper.LOC_UNDEFINED
LOC_SOURCE = _mapper.LOC_SOURCE
LOC_DESTINATION = _mapper.LOC_DESTINATION
LOC_ANY = _mapper.LOC_ANY
PROTO_UNDEFINED = _mapper.PROTO_UNDEFINED
PROTO_UDP = _mapper.PROTO_UDP
PROTO_TCP = _mapper.PROTO_TCP
DIR_UNDEFINED = _mapper.DIR_UNDEFINED
DIR_INCOMING = _mapper.DIR_INCOMING
DIR_OUTGOING = _mapper.DIR_OUTGOING
DIR_ANY = _mapper.DIR_ANY
NEW_INSTANCE = _mapper.NEW_INSTANCE
UPSTREAM_RELEASE = _mapper.UPSTREAM_RELEASE
DOWNSTREAM_RELEASE = _mapper.DOWNSTREAM_RELEASE
INSTANCE_OVERFLOW = _mapper.INSTANCE_OVERFLOW
INSTANCE_ALL = _mapper.INSTANCE_ALL
NO_STEALING = _mapper.NO_STEALING
STEAL_OLDEST = _mapper.STEAL_OLDEST
STEAL_NEWEST = _mapper.STEAL_NEWEST
ADDED = _mapper.ADDED
MODIFIED = _mapper.MODIFIED
REMOVED = _mapper.REMOVED
EXPIRED = _mapper.EXPIRED
version = _mapper.version
class device(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, name, port=0, DISOWN=None):
        this = _mapper.new_device(name, port, DISOWN)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mapper.delete_device
    __del__ = lambda self: None

    def network(self):
        return _mapper.device_network(self)

    def database(self):
        return _mapper.device_database(self)

    def add_signal(self, *args):
        return _mapper.device_add_signal(self, *args)

    def add_input_signal(self, *args):
        return _mapper.device_add_input_signal(self, *args)

    def add_output_signal(self, *args):
        return _mapper.device_add_output_signal(self, *args)

    def remove_signal(self, sig):
        return _mapper.device_remove_signal(self, sig)

    def poll(self, timeout=0):
        return _mapper.device_poll(self, timeout)

    def set_link_callback(self, PyFunc=None):
        return _mapper.device_set_link_callback(self, PyFunc)

    def set_map_callback(self, PyFunc=None):
        return _mapper.device_set_map_callback(self, PyFunc)

    def start_queue(self, py_tt=None):
        return _mapper.device_start_queue(self, py_tt)

    def send_queue(self, py_tt):
        return _mapper.device_send_queue(self, py_tt)

    def add_signal_group(self):
        return _mapper.device_add_signal_group(self)

    def remove_signal_group(self, group):
        return _mapper.device_remove_signal_group(self, group)

    def generate_unique_id(self):
        return _mapper.device_generate_unique_id(self)

    def get_num_properties(self):
        return _mapper.device_get_num_properties(self)

    def get_description(self):
        return _mapper.device_get_description(self)

    def get_host(self):
        return _mapper.device_get_host(self)

    def get_id(self):
        return _mapper.device_get_id(self)

    def get_is_local(self):
        return _mapper.device_get_is_local(self)

    def get_is_ready(self):
        return _mapper.device_get_is_ready(self)

    def get_name(self):
        return _mapper.device_get_name(self)

    def get_num_signals(self, *args):
        return _mapper.device_get_num_signals(self, *args)

    def get_num_links(self, *args):
        return _mapper.device_get_num_links(self, *args)

    def get_num_maps(self, *args):
        return _mapper.device_get_num_maps(self, *args)

    def get_ordinal(self):
        return _mapper.device_get_ordinal(self)

    def get_port(self):
        return _mapper.device_get_port(self)

    def get_synced(self):
        return _mapper.device_get_synced(self)

    def get_version(self):
        return _mapper.device_get_version(self)

    def get_property(self, *args):
        return _mapper.device_get_property(self, *args)

    def set_description(self, description):
        return _mapper.device_set_description(self, description)

    def set_property(self, key, val=0, publish=1):
        return _mapper.device_set_property(self, key, val, publish)

    def remove_property(self, key):
        return _mapper.device_remove_property(self, key)

    def clear_staged_properties(self):
        return _mapper.device_clear_staged_properties(self)

    def push(self):
        return _mapper.device_push(self)

    def signal(self, *args):
        return _mapper.device_signal(self, *args)

    def signals(self, *args):
        return _mapper.device_signals(self, *args)

    def links(self, *args):
        return _mapper.device_links(self, *args)

    def maps(self, *args):
        return _mapper.device_maps(self, *args)

    description = property(get_description, set_description)
    id = property(get_id)
    is_local = property(get_is_local)
    name = property(get_name)
    num_signals = property(get_num_signals)
    num_links = property(get_num_links)
    num_maps = property(get_num_maps)
    num_properties = property(get_num_properties)
    ordinal = property(get_ordinal)
    port = property(get_port)
    ready = property(get_is_ready)
    synced = property(get_synced)
    version = property(get_version)
    def get_properties(self):
        props = {}
        for i in range(self.num_properties):
            prop = self.get_property(i)
            if prop:
                props[prop[0]] = prop[1];
        return props
    def __propgetter(self):
        device = self
        props = self.get_properties()
        class propsetter(dict):
            __getitem__ = props.__getitem__
            def __setitem__(self, key, value):
                props[key] = value
                device.set_property(key, value)
        return propsetter(self.get_properties())
    properties = property(__propgetter)
    def set_properties(self, props):
        [self.set_property(k, props[k]) for k in props]
    def __nonzero__(self):
        return False if self.this is None else True

device_swigregister = _mapper.device_swigregister
device_swigregister(device)

class link(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def clear_staged_properties(self):
        return _mapper.link_clear_staged_properties(self)

    def push(self):
        return _mapper.link_push(self)

    def get_num_properties(self):
        return _mapper.link_get_num_properties(self)

    def get_id(self):
        return _mapper.link_get_id(self)

    def get_num_maps(self):
        return _mapper.link_get_num_maps(self)

    def get_property(self, *args):
        return _mapper.link_get_property(self, *args)

    def set_property(self, key, val=0, publish=1):
        return _mapper.link_set_property(self, key, val, publish)

    def remove_property(self, key):
        return _mapper.link_remove_property(self, key)

    def device(self, index=0):
        return _mapper.link_device(self, index)

    def maps(self):
        return _mapper.link_maps(self)

    id = property(get_id)
    num_maps = property(get_num_maps)
    num_properties = property(get_num_properties)
    def get_properties(self):
        props = {}
        for i in range(self.num_properties):
            prop = self.get_property(i)
            if prop:
                props[prop[0]] = prop[1];
        return props
    def __propgetter(self):
        device = self
        props = self.get_properties()
        class propsetter(dict):
            __getitem__ = props.__getitem__
            def __setitem__(self, key, value):
                props[key] = value
                device.set_property(key, value)
        return propsetter(self.get_properties())
    properties = property(__propgetter)
    def set_properties(self, props):
        [self.set_property(k, props[k]) for k in props]
    def __nonzero__(self):
        return False if self.this is None else True


    def __init__(self):
        this = _mapper.new_link()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mapper.delete_link
    __del__ = lambda self: None
link_swigregister = _mapper.link_swigregister
link_swigregister(link)

class signal(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def device(self):
        return _mapper.signal_device(self)

    def active_instance_id(self, index):
        return _mapper.signal_active_instance_id(self, index)

    def instance_id(self, index):
        return _mapper.signal_instance_id(self, index)

    def query_remotes(self, tt=None):
        return _mapper.signal_query_remotes(self, tt)

    def release_instance(self, id, tt=None):
        return _mapper.signal_release_instance(self, id, tt)

    def remove_instance(self, id):
        return _mapper.signal_remove_instance(self, id)

    def reserve_instances(self, *args):
        return _mapper.signal_reserve_instances(self, *args)

    def set_instance_event_callback(self, PyFunc=None, flags=0):
        return _mapper.signal_set_instance_event_callback(self, PyFunc, flags)

    def set_callback(self, PyFunc=None):
        return _mapper.signal_set_callback(self, PyFunc)

    def update(self, val=0, tt=None):
        return _mapper.signal_update(self, val, tt)

    def update_instance(self, id, val=0, tt=None):
        return _mapper.signal_update_instance(self, id, val, tt)

    def get_num_properties(self):
        return _mapper.signal_get_num_properties(self)

    def get_description(self):
        return _mapper.signal_get_description(self)

    def get_direction(self):
        return _mapper.signal_get_direction(self)

    def get_group(self):
        return _mapper.signal_get_group(self)

    def get_id(self):
        return _mapper.signal_get_id(self)

    def get_is_local(self):
        return _mapper.signal_get_is_local(self)

    def get_instance_stealing_mode(self):
        return _mapper.signal_get_instance_stealing_mode(self)

    def get_length(self):
        return _mapper.signal_get_length(self)

    def get_minimum(self):
        return _mapper.signal_get_minimum(self)

    def get_maximum(self):
        return _mapper.signal_get_maximum(self)

    def get_name(self):
        return _mapper.signal_get_name(self)

    def get_num_active_instances(self):
        return _mapper.signal_get_num_active_instances(self)

    def get_num_instances(self):
        return _mapper.signal_get_num_instances(self)

    def get_num_maps(self, *args):
        return _mapper.signal_get_num_maps(self, *args)

    def get_num_reserved_instances(self):
        return _mapper.signal_get_num_reserved_instances(self)

    def get_rate(self):
        return _mapper.signal_get_rate(self)

    def get_type(self):
        return _mapper.signal_get_type(self)

    def get_unit(self):
        return _mapper.signal_get_unit(self)

    def get_property(self, *args):
        return _mapper.signal_get_property(self, *args)

    def value(self):
        return _mapper.signal_value(self)

    def set_description(self, description):
        return _mapper.signal_set_description(self, description)

    def set_group(self, group):
        return _mapper.signal_set_group(self, group)

    def set_instance_stealing_mode(self, mode):
        return _mapper.signal_set_instance_stealing_mode(self, mode)

    def set_maximum(self, val=0):
        return _mapper.signal_set_maximum(self, val)

    def set_minimum(self, val=0):
        return _mapper.signal_set_minimum(self, val)

    def set_rate(self, rate):
        return _mapper.signal_set_rate(self, rate)

    def set_unit(self, unit):
        return _mapper.signal_set_unit(self, unit)

    def set_property(self, key, val=0, publish=1):
        return _mapper.signal_set_property(self, key, val, publish)

    def remove_property(self, key):
        return _mapper.signal_remove_property(self, key)

    def clear_staged_properties(self):
        return _mapper.signal_clear_staged_properties(self)

    def push(self):
        return _mapper.signal_push(self)

    def maps(self, *args):
        return _mapper.signal_maps(self, *args)

    description = property(get_description, set_description)
    direction = property(get_direction)
    group = property(get_group, set_group)
    id = property(get_id)
    instance_stealing_mode = property(get_instance_stealing_mode,
                                      set_instance_stealing_mode)
    is_local = property(get_is_local)
    length = property(get_length)
    maximum = property(get_maximum, set_maximum)
    minimum = property(get_minimum, set_minimum)
    name = property(get_name)
    num_active_instances = property(get_num_active_instances)
    num_instances = property(get_num_instances)
    num_maps = property(get_num_maps)
    num_properties = property(get_num_properties)
    num_reserved_instances = property(get_num_reserved_instances)
    rate = property(get_rate, set_rate)
    type = property(get_type)
    unit = property(get_unit, set_unit)
    def get_properties(self):
        props = {}
        for i in range(self.num_properties):
            prop = self.get_property(i)
            if prop:
                props[prop[0]] = prop[1];
        return props
    def __propgetter(self):
        signal = self
        props = self.get_properties()
        class propsetter(dict):
            __getitem__ = props.__getitem__
            def __setitem__(self, key, value):
                props[key] = value
                signal.set_property(key, value)
        return propsetter(self.get_properties())
    properties = property(__propgetter)
    def set_properties(self, props):
        [self.set_property(k, props[k]) for k in props]
    def __nonzero__(self):
        return False if self.this is None else True


    def __init__(self):
        this = _mapper.new_signal()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mapper.delete_signal
    __del__ = lambda self: None
signal_swigregister = _mapper.signal_swigregister
signal_swigregister(signal)

class map(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, srcs=0, dsts=0):
        this = _mapper.new_map(srcs, dsts)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mapper.delete_map
    __del__ = lambda self: None

    def refresh(self):
        return _mapper.map_refresh(self)

    def release(self):
        return _mapper.map_release(self)

    def source(self, index=0):
        return _mapper.map_source(self, index)

    def destination(self, index=0):
        return _mapper.map_destination(self, index)

    def slot(self, *args):
        return _mapper.map_slot(self, *args)

    def add_scope(self, dev):
        return _mapper.map_add_scope(self, dev)

    def remove_scope(self, dev):
        return _mapper.map_remove_scope(self, dev)

    def scopes(self):
        return _mapper.map_scopes(self)

    def get_num_properties(self):
        return _mapper.map_get_num_properties(self)

    def get_description(self):
        return _mapper.map_get_description(self)

    def get_expression(self):
        return _mapper.map_get_expression(self)

    def get_id(self):
        return _mapper.map_get_id(self)

    def get_mode(self):
        return _mapper.map_get_mode(self)

    def get_muted(self):
        return _mapper.map_get_muted(self)

    def get_ready(self):
        return _mapper.map_get_ready(self)

    def get_num_slots(self, *args):
        return _mapper.map_get_num_slots(self, *args)

    def get_process_location(self):
        return _mapper.map_get_process_location(self)

    def get_protocol(self):
        return _mapper.map_get_protocol(self)

    def get_property(self, *args):
        return _mapper.map_get_property(self, *args)

    def set_description(self, description):
        return _mapper.map_set_description(self, description)

    def set_expression(self, expression):
        return _mapper.map_set_expression(self, expression)

    def set_mode(self, mode):
        return _mapper.map_set_mode(self, mode)

    def set_muted(self, muted):
        return _mapper.map_set_muted(self, muted)

    def set_process_location(self, loc):
        return _mapper.map_set_process_location(self, loc)

    def set_protocol(self, proto):
        return _mapper.map_set_protocol(self, proto)

    def set_property(self, key, val=0, publish=1):
        return _mapper.map_set_property(self, key, val, publish)

    def remove_property(self, key):
        return _mapper.map_remove_property(self, key)

    def clear_staged_properties(self):
        return _mapper.map_clear_staged_properties(self)

    def push(self):
        return _mapper.map_push(self)

    description = property(get_description, set_description)
    expression = property(get_expression, set_expression)
    id = property(get_id)
    mode = property(get_mode, set_mode)
    muted = property(get_muted, set_muted)
    num_properties = property(get_num_properties)
    num_slots = property(get_num_slots)
    process_location = property(get_process_location, set_process_location)
    protocol = property(get_protocol, set_protocol)
    ready = property(get_ready)
    def get_properties(self):
        props = {}
        for i in range(self.num_properties):
            prop = self.get_property(i)
            if prop:
                props[prop[0]] = prop[1];
        return props
    def __propgetter(self):
        map = self
        props = self.get_properties()
        class propsetter(dict):
            __getitem__ = props.__getitem__
            def __setitem__(self, key, value):
                props[key] = value
                map.set_property(key, value)
        return propsetter(self.get_properties())
    properties = property(__propgetter)
    def set_properties(self, props):
        [self.set_property(k, props[k]) for k in props]
    def __nonzero__(self):
        return False if self.this is None else True

map_swigregister = _mapper.map_swigregister
map_swigregister(map)

class slot(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def signal(self):
        return _mapper.slot_signal(self)

    def get_num_properties(self):
        return _mapper.slot_get_num_properties(self)

    def get_bound_max(self):
        return _mapper.slot_get_bound_max(self)

    def get_bound_min(self):
        return _mapper.slot_get_bound_min(self)

    def get_calibrating(self):
        return _mapper.slot_get_calibrating(self)

    def get_causes_update(self):
        return _mapper.slot_get_causes_update(self)

    def get_index(self):
        return _mapper.slot_get_index(self)

    def get_minimum(self):
        return _mapper.slot_get_minimum(self)

    def get_maximum(self):
        return _mapper.slot_get_maximum(self)

    def get_use_instances(self):
        return _mapper.slot_get_use_instances(self)

    def get_property(self, *args):
        return _mapper.slot_get_property(self, *args)

    def set_bound_max(self, action):
        return _mapper.slot_set_bound_max(self, action)

    def set_bound_min(self, action):
        return _mapper.slot_set_bound_min(self, action)

    def set_calibrating(self, calibrating):
        return _mapper.slot_set_calibrating(self, calibrating)

    def set_causes_update(self, causes_update):
        return _mapper.slot_set_causes_update(self, causes_update)

    def set_maximum(self, val=0):
        return _mapper.slot_set_maximum(self, val)

    def set_minimum(self, val=0):
        return _mapper.slot_set_minimum(self, val)

    def set_property(self, key, val=0, publish=1):
        return _mapper.slot_set_property(self, key, val, publish)

    def set_use_instances(self, use_instances):
        return _mapper.slot_set_use_instances(self, use_instances)

    def remove_property(self, key):
        return _mapper.slot_remove_property(self, key)

    def clear_staged_properties(self):
        return _mapper.slot_clear_staged_properties(self)

    bound_max = property(get_bound_max, set_bound_max)
    bound_min = property(get_bound_min, set_bound_min)
    calibrating = property(get_calibrating, set_calibrating)
    causes_update = property(get_causes_update, set_causes_update)
    index = property(get_index)
    maximum = property(get_maximum, set_maximum)
    minimum = property(get_minimum, set_minimum)
    num_properties = property(get_num_properties)
    use_instances = property(get_use_instances, set_use_instances)
    def get_properties(self):
        props = {}
        for i in range(self.num_properties):
            prop = self.get_property(i)
            if prop:
                props[prop[0]] = prop[1];
        return props
    def __propgetter(self):
        slot = self
        props = self.get_properties()
        class propsetter(dict):
            __getitem__ = props.__getitem__
            def __setitem__(self, key, value):
                props[key] = value
                slot.set_property(key, value)
        return propsetter(self.get_properties())
    properties = property(__propgetter)
    def set_properties(self, props):
        [self.set_property(k, props[k]) for k in props]
    def __nonzero__(self):
        return False if self.this is None else True


    def __init__(self):
        this = _mapper.new_slot()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mapper.delete_slot
    __del__ = lambda self: None
slot_swigregister = _mapper.slot_swigregister
slot_swigregister(slot)

class database(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _mapper.new_database(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mapper.delete_database
    __del__ = lambda self: None

    def poll(self, timeout=0):
        return _mapper.database_poll(self, timeout)

    def subscribe(self, *args):
        return _mapper.database_subscribe(self, *args)

    def unsubscribe(self, dev=None):
        return _mapper.database_unsubscribe(self, dev)

    def request_devices(self):
        return _mapper.database_request_devices(self)

    def flush(self, timeout=0, quiet=0):
        return _mapper.database_flush(self, timeout, quiet)

    def network(self):
        return _mapper.database_network(self)

    def timeout(self):
        return _mapper.database_timeout(self)

    def set_timeout(self, timeout):
        return _mapper.database_set_timeout(self, timeout)

    def add_device_callback(self, PyFunc):
        return _mapper.database_add_device_callback(self, PyFunc)

    def remove_device_callback(self, PyFunc):
        return _mapper.database_remove_device_callback(self, PyFunc)

    def add_link_callback(self, PyFunc):
        return _mapper.database_add_link_callback(self, PyFunc)

    def remove_link_callback(self, PyFunc):
        return _mapper.database_remove_link_callback(self, PyFunc)

    def add_signal_callback(self, PyFunc):
        return _mapper.database_add_signal_callback(self, PyFunc)

    def remove_signal_callback(self, PyFunc):
        return _mapper.database_remove_signal_callback(self, PyFunc)

    def add_map_callback(self, PyFunc):
        return _mapper.database_add_map_callback(self, PyFunc)

    def remove_map_callback(self, PyFunc):
        return _mapper.database_remove_map_callback(self, PyFunc)

    def get_num_devices(self):
        return _mapper.database_get_num_devices(self)

    def device(self, *args):
        return _mapper.database_device(self, *args)

    def devices(self, *args):
        return _mapper.database_devices(self, *args)

    def devices_by_property(self, *args):
        return _mapper.database_devices_by_property(self, *args)

    def get_num_links(self):
        return _mapper.database_get_num_links(self)

    def link(self, id):
        return _mapper.database_link(self, id)

    def links(self):
        return _mapper.database_links(self)

    def links_by_property(self, *args):
        return _mapper.database_links_by_property(self, *args)

    def get_num_signals(self, *args):
        return _mapper.database_get_num_signals(self, *args)

    def signal(self, id):
        return _mapper.database_signal(self, id)

    def signals(self, *args):
        return _mapper.database_signals(self, *args)

    def signals_by_property(self, *args):
        return _mapper.database_signals_by_property(self, *args)

    def get_num_maps(self):
        return _mapper.database_get_num_maps(self)

    def map(self, id):
        return _mapper.database_map(self, id)

    def maps(self):
        return _mapper.database_maps(self)

    def maps_by_property(self, *args):
        return _mapper.database_maps_by_property(self, *args)

    def maps_by_scope(self, dev):
        return _mapper.database_maps_by_scope(self, dev)

    def maps_by_slot_property(self, *args):
        return _mapper.database_maps_by_slot_property(self, *args)

    num_devices = property(get_num_devices)
    num_signals = property(get_num_signals)
    num_links = property(get_num_links)
    num_maps = property(get_num_maps)

database_swigregister = _mapper.database_swigregister
database_swigregister(database)

class network(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, iface=None, ip=None, port=7570):
        this = _mapper.new_network(iface, ip, port)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mapper.delete_network
    __del__ = lambda self: None

    def database(self):
        return _mapper.network_database(self)

    def get_group(self):
        return _mapper.network_get_group(self)

    def get_interface(self):
        return _mapper.network_get_interface(self)

    def get_ip4(self):
        return _mapper.network_get_ip4(self)

    def get_port(self):
        return _mapper.network_get_port(self)

    group = property(get_group)
    ip4 = property(get_ip4)
    interface = property(get_interface)
    port = property(get_port)
    def get_properties(self):
        props = {}
        for i in range(self.num_properties):
            prop = self.get_property(i)
            if prop:
                props[prop[0]] = prop[1];
        return props
    def __propgetter(self):
        slot = self
        props = self.get_properties()
        class propsetter(dict):
            __getitem__ = props.__getitem__
            def __setitem__(self, key, value):
                props[key] = value
                slot.set_property(key, value)
        return propsetter(self.get_properties())
    properties = property(__propgetter)
    def set_properties(self, props):
        [self.set_property(k, props[k]) for k in props]
    def __nonzero__(self):
        return False if self.this is None else True

network_swigregister = _mapper.network_swigregister
network_swigregister(network)

class timetag(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _mapper.new_timetag(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mapper.delete_timetag
    __del__ = lambda self: None

    def now(self):
        return _mapper.timetag_now(self)

    def get_double(self):
        return _mapper.timetag_get_double(self)

    def __add__(self, *args):
        return _mapper.timetag___add__(self, *args)

    def __iadd__(self, *args):
        return _mapper.timetag___iadd__(self, *args)

    def __radd__(self, val):
        return _mapper.timetag___radd__(self, val)

    def __sub__(self, *args):
        return _mapper.timetag___sub__(self, *args)

    def __isub__(self, *args):
        return _mapper.timetag___isub__(self, *args)

    def __rsub__(self, val):
        return _mapper.timetag___rsub__(self, val)

    def __mul__(self, multiplicand):
        return _mapper.timetag___mul__(self, multiplicand)

    def __imul__(self, multiplicand):
        return _mapper.timetag___imul__(self, multiplicand)

    def __rmul__(self, val):
        return _mapper.timetag___rmul__(self, val)

    def __div__(self, divisor):
        return _mapper.timetag___div__(self, divisor)

    def __idiv__(self, divisor):
        return _mapper.timetag___idiv__(self, divisor)

    def __rdiv__(self, val):
        return _mapper.timetag___rdiv__(self, val)

    def __lt__(self, *args):
        return _mapper.timetag___lt__(self, *args)

    def __le__(self, *args):
        return _mapper.timetag___le__(self, *args)

    def __eq__(self, *args):
        return _mapper.timetag___eq__(self, *args)

    def __ge__(self, *args):
        return _mapper.timetag___ge__(self, *args)

    def __gt__(self, *args):
        return _mapper.timetag___gt__(self, *args)
timetag_swigregister = _mapper.timetag_swigregister
timetag_swigregister(timetag)

class device_query(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    query = _swig_property(_mapper.device_query_query_get, _mapper.device_query_query_set)

    def __init__(self, orig):
        this = _mapper.new_device_query(orig)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mapper.delete_device_query
    __del__ = lambda self: None

    def __iter__(self):
        return _mapper.device_query___iter__(self)

    def next(self):
        return _mapper.device_query_next(self)

    def join(self, d):
        return _mapper.device_query_join(self, d)

    def intersect(self, d):
        return _mapper.device_query_intersect(self, d)

    def subtract(self, d):
        return _mapper.device_query_subtract(self, d)
device_query_swigregister = _mapper.device_query_swigregister
device_query_swigregister(device_query)

class link_query(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    query = _swig_property(_mapper.link_query_query_get, _mapper.link_query_query_set)

    def __init__(self, orig):
        this = _mapper.new_link_query(orig)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mapper.delete_link_query
    __del__ = lambda self: None

    def __iter__(self):
        return _mapper.link_query___iter__(self)

    def next(self):
        return _mapper.link_query_next(self)

    def join(self, l):
        return _mapper.link_query_join(self, l)

    def intersect(self, l):
        return _mapper.link_query_intersect(self, l)

    def subtract(self, l):
        return _mapper.link_query_subtract(self, l)
link_query_swigregister = _mapper.link_query_swigregister
link_query_swigregister(link_query)

class signal_query(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    query = _swig_property(_mapper.signal_query_query_get, _mapper.signal_query_query_set)

    def __init__(self, orig):
        this = _mapper.new_signal_query(orig)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mapper.delete_signal_query
    __del__ = lambda self: None

    def __iter__(self):
        return _mapper.signal_query___iter__(self)

    def next(self):
        return _mapper.signal_query_next(self)

    def join(self, s):
        return _mapper.signal_query_join(self, s)

    def intersect(self, s):
        return _mapper.signal_query_intersect(self, s)

    def subtract(self, s):
        return _mapper.signal_query_subtract(self, s)
signal_query_swigregister = _mapper.signal_query_swigregister
signal_query_swigregister(signal_query)

class map_query(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    query = _swig_property(_mapper.map_query_query_get, _mapper.map_query_query_set)

    def __init__(self, orig):
        this = _mapper.new_map_query(orig)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mapper.delete_map_query
    __del__ = lambda self: None

    def __iter__(self):
        return _mapper.map_query___iter__(self)

    def next(self):
        return _mapper.map_query_next(self)

    def join(self, m):
        return _mapper.map_query_join(self, m)

    def intersect(self, m):
        return _mapper.map_query_intersect(self, m)

    def subtract(self, m):
        return _mapper.map_query_subtract(self, m)

    def release(self):
        return _mapper.map_query_release(self)
map_query_swigregister = _mapper.map_query_swigregister
map_query_swigregister(map_query)



